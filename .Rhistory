library(DSWE)
library(DSWE)
library(devtools)
use_rcpp()
library(DSWE)
library(DSWE)
library(DSWE)
help("KnnPcurve")
library(DSWE)
help("KnnPcurve")
library(DSWE)
help(DSWE)
?DSWE
?funGP
?KnnPcurve
?CovMatch
library(DSWE)
?AMK
library(DSWE)
library(DSWE)
data = read.csv('F:/goldwind_averaged/Turbine34.csv')
c = KnnPcurve(dname = data, xvar = c(1, 6), yvar = 5, kfold = 10)
c = KnnPcurve(dname = data, xvar = c(1, 6), yvar = 5, kfold = 10, forward_stepwise = TRUE)
View(c)
data1 = read.csv('F:/goldwind_averaged/Turbine34.csv')
data2 = read.csv('F:/goldwind_averaged/Turbine61.csv')
data = list(data1, data2)
View(data)
View(data1)
c = ComputePCurve(data, xcol = c(1, 6, 13), ycol = 5, var1col = 1, var2col = 6)
c = ComputePCurve(data, xcol = c(1, 6, 13), ycol = 5, var1col = 1, var2col = 6)
library(DSWE)
c = ComputePCurve(data, xcol = c(1, 6, 13), ycol = 5, var1col = 1, var2col = 6)
library(DSWE)
c = ComputePCurve(data, xcol = c(1, 6, 13), ycol = 5, var1col = 1, var2col = 6)
c = ComputePCurve(data, xcol = c(1, 6, 13), ycol = 5, var1col = 1, var2col = 6)
library(DSWE)
c = ComputePCurve(data, xcol = c(1, 6, 13), ycol = 5, var1col = 1, var2col = 6)
c = CovMatch(data, cov = c(1, 6, 13))
library(DSWE)
c = ComputePCurve(data, xcol = c(1, 6, 13), ycol = 5, var1col = 1, var2col = 6)
c = CovMatch(data, cov = c(1, 6, 13))
library(DSWE)
remove.packages(matrixStats)
install.packages("matrixStats")
library(DSWE)
data = read.csv('F:/goldwind_averaged/Turbine34.csv')
data = read.csv('F:/goldwind_averaged/Turbine34.csv')
library(DSWE)
a = AMK(data[, c(1, 6)], data[, 5], testX = data[, c(1, 6)], bw = 'dpi')
library(DSWE)
a = AMK(data[, c(1, 6)], data[, 5], testX = data[, c(1, 6)], bw = 'dpi')
#' @param trainX a matrix or dataframe to be used in modelling
#' @param trainY a numeric or vector as a target
#' @param testX a matrix or dataframe, to be used in computing the predictions
#' @param bw a vector of character input. If character, the input should be 'dpi' or 'dpi-gap'
#' @param nMultiCov a numerical value specifying the number of covariates in multiplicative term
#' @param fixedCov a vector or numeric specifying the fixed covariates column number
#' @param cirCov a vector or numeric specifying the circular covariates column number
#'
#' @import KernSmooth
#' @export
AMK = function(trainX, trainY, testX, bw = 'dpi', nMultiCov = ncol(trainX), fixedCov = NULL, cirCov = NULL ){
if (!is.matrix(trainX) && !is.data.frame(trainX)) {
stop("trainX must be a matrix or a dataframe.")
}
nCov = ncol(trainX)
if (!is.numeric(trainY)){
stop("trainY must be numeric/vector.")
}
if (length(trainY) != nrow(trainX)){
stop("number of datapoints in trainX and trainY must be the same.")
}
if (!is.numeric(bw)) {
if (bw != "dpi" && bw != "dpi_gap"){
{
stop("bw must be numeric or set to 'dpi' or 'dpi_gap'.")
}
}
}else if (length(bw)!= nCov){
stop("length of bw must be same as the number of covariates.")
}
if (nCov == 2) {
if (nMultiCov != "none"){
nMultiCov = "all"
message("Setting nMultiCov to 'all', since there are only 2 covariates. It can be set to 'none' for additive kernels.")
}
}
if (nCov == 1) {
nMultiCov = "all"
}
if (nMultiCov != "all" && nMultiCov != "none"){
if (!is.numeric(nMultiCov) || nMultiCov%%1 != 0){
stop("if nMultiCov is not set to 'all' or 'none', then it must be set to an integer greater than 1, and less than the number of covariates.")
}
if (nMultiCov >= ncol(trainX) || nMultiCov < 2) {
stop("if nMultiCov is not set to 'all' or 'none', then it must be set to an integer greater than 1, and less than the number of covariates.")
}
if (!is.numeric(fixedCov) || any(fixedCov%%1 != 0)){
stop("fixedCov must be an integer or a vector of integers.")
}
if (length(fixedCov) >= nMultiCov){
stop("length of fixedCov must be less than nMultiCov.")
}
}
returnObj = kernpred(trainX, trainY, testX, bw, nMultiCov, fixedCov, cirCov)
return(returnObj)
}
## Function to calculate weights for a testpoint
ComputeGaussianKernel = function(x,y,lambda){
x = as.numeric(x)
y = as.numeric(y)
lambda = as.numeric(lambda)
kernel = (1/(sqrt(2*pi)*lambda))*exp(-(x-y)**2/(2*lambda**2))
return(kernel)
}
ComputeVonMisesKernel = function(D,D0, nu){
D = as.numeric(D)
D0 = as.numeric(D0)
nu = as.numeric(nu)
kernel =  exp(nu*cos(D-D0))/(2*pi*besselI(x=nu,nu=0))
return(kernel)
}
## Function to calculate weights for a trivariate kernel given the bivariate kernel and the third input variable
calculateWeights = function(trainX,testpoint,bandwidth,nMultiCov,fixedCov,cirCov){
nCov = ncol(trainX)
if (nMultiCov == "all"){
weights = matrix(NA,nrow(trainX),1)
kernel = rep(1,nrow(trainX))
for (i in 1:nCov){
if (i %in% cirCov){
kernel = kernel * ComputeVonMisesKernel(trainX[,i],testpoint[i],bandwidth[i])
} else {
kernel = kernel * ComputeGaussianKernel(trainX[,i],testpoint[i],bandwidth[i])
}
}
weights[,1] = kernel/sum(kernel)
} else if (nMultiCov == "none"){
weights = matrix(NA,nrow(trainX),nCov)
for (i in 1:nCov){
if (i %in% cirCov){
kernel = ComputeVonMisesKernel(trainX[,i],testpoint[i],bandwidth[i])
} else {
kernel = ComputeGaussianKernel(trainX[,i],testpoint[i],bandwidth[i])
}
weights[,i] = kernel/sum(kernel)
}
} else {
nonFixedCov = setdiff(c(1:nCov),fixedCov)
covCombination = combn(nonFixedCov, (nMultiCov - length(fixedCov)))
weights = matrix(NA,nrow(trainX),ncol(covCombination))
for (i in 1:ncol(covCombination)){
kernel = rep(1,nrow(trainX))
for (f in fixedCov){
if (f %in% cirCov){
kernel = kernel * ComputeVonMisesKernel(trainX[,f],testpoint[f],bandwidth[f])
} else {
kernel = kernel * ComputeGaussianKernel(trainX[,f],testpoint[f],bandwidth[f])
}
}
for (j in covCombination[,i]){
if (j %in% cirCov){
kernel = kernel * ComputeVonMisesKernel(trainX[,j],testpoint[j],bandwidth[j])
} else {
kernel = kernel * ComputeGaussianKernel(trainX[,j],testpoint[j],bandwidth[j])
}
}
weights[,i] = kernel/sum(kernel)
}
}
return(weights)
}
## Function to get bandwidth of x using dpi
computeBandwidth = function(trainY,trainX,cirCov){
bandwidth = rep(0,ncol(trainX))
for (i in 1:ncol(trainX)){
bandwidth[i] = KernSmooth::dpill(trainX[,i],trainY)
}
for (i in cirCov){
bandwidth[i] = bandwidth[i]*pi/180
bandwidth[i] = 1/((bandwidth[i])^2)
}
return(bandwidth)
}
### Function to get mean estimate
kernpred = function(trainX, trainY, testX, bw, nMultiCov, fixedCov, cirCov){
trainX = as.matrix(trainX)
trainY = as.numeric(trainY)
testX = as.matrix(testX)
if (class(bw)=="character"){
if (bw == "dpi"){
bandwidth = computeBandwidth(trainY,trainX,cirCov)
if (any(!is.finite(bandwidth))){
message("Bandwidths not finite for some of the covariates. Bandwidths are:")
for (i in 1:ncol(trainX)){
message("Covariate ",i," : ",bandwidth[i])
}
stop("Estimation stopped. Try with finite bandwidths.")
}
pred = computePred(trainX, trainY, testX, bandwidth, nMultiCov, fixedCov, cirCov )
}else if (bw == "dpi_gap"){
bandwidth = computeBandwidth(trainY,trainX,cirCov)
if (any(!is.finite(bandwidth))){
##Use Hoon's code here
}else{
pred = computePred(trainX, trainY, testX, bandwidth, nMultiCov, fixedCov, cirCov )
}
}
}else {
bandwidth = bw
pred = computePred(trainX, trainY, testX, bandwidth, nMultiCov, fixedCov, cirCov )
}
return(pred)
}
computePred = function(trainX, trainY, testX, bandwidth, nMultiCov, fixedCov, cirCov ){
for (i in cirCov) {
trainX[,i] = trainX[,i]*pi/180
testX[,i] = testX[,i]*pi/180
}
pred = rep(NA, nrow(testX))
for (i in 1:length(pred)){
weights = calculateWeights(trainX,testX[i,],bandwidth,nMultiCov,fixedCov,cirCov)
pred[i] = (rowSums(weights)%*%trainY)/ncol(weights)
}
if (any(!is.finite(pred))){
warning("some of the testpoints resulted in non-finite predictions.")
}
return(list(bandwidth = bandwidth, pred = pred))
}
a = AMK(data[, c(1, 6)], data[, 5], testX = data[, c(1, 6)], bw = 'dpi')
a = AMK(data[, c(1, 3, 6)], data[, 5], testX = data[, c(1, 3, 6)], bw = 'dpi', nMultiCov = 2, fixedCov = c(1, 3), cirCov = 2)
#' @param trainX a matrix or dataframe to be used in modelling
#' @param trainY a numeric or vector as a target
#' @param testX a matrix or dataframe, to be used in computing the predictions
#' @param bw a vector of character input. If character, the input should be 'dpi' or 'dpi-gap'
#' @param nMultiCov a numerical value specifying the number of covariates in multiplicative term
#' @param fixedCov a vector or numeric specifying the fixed covariates column number
#' @param cirCov a vector or numeric specifying the circular covariates column number
#'
#' @import KernSmooth
#' @export
AMK = function(trainX, trainY, testX, bw = 'dpi', nMultiCov = ncol(trainX), fixedCov = NULL, cirCov = NULL ){
if (!is.matrix(trainX) && !is.data.frame(trainX)) {
stop("trainX must be a matrix or a dataframe.")
}
nCov = ncol(trainX)
if (!is.numeric(trainY)){
stop("trainY must be numeric/vector.")
}
if (length(trainY) != nrow(trainX)){
stop("number of datapoints in trainX and trainY must be the same.")
}
if (!is.numeric(bw)) {
if (bw != "dpi" && bw != "dpi_gap"){
{
stop("bw must be numeric or set to 'dpi' or 'dpi_gap'.")
}
}
}else if (length(bw)!= nCov){
stop("length of bw must be same as the number of covariates.")
}
if (nCov == 2) {
if (nMultiCov != "none"){
nMultiCov = "all"
message("Setting nMultiCov to 'all', since there are only 2 covariates. It can be set to 'none' for additive kernels.")
}
}
if (nCov == 1) {
nMultiCov = "all"
}
if (nMultiCov != "all" && nMultiCov != "none"){
if (!is.numeric(nMultiCov) || nMultiCov%%1 != 0){
stop("if nMultiCov is not set to 'all' or 'none', then it must be set to an integer greater than 1, and less than the number of covariates.")
}
if (nMultiCov >= ncol(trainX) || nMultiCov < 2) {
stop("if nMultiCov is not set to 'all' or 'none', then it must be set to an integer greater than 1, and less than the number of covariates.")
}
if (!is.numeric(fixedCov) || any(fixedCov%%1 != 0)){
stop("fixedCov must be an integer or a vector of integers.")
}
if (length(fixedCov) > nMultiCov){
stop("length of fixedCov must be less than nMultiCov.")
}
}
returnObj = kernpred(trainX, trainY, testX, bw, nMultiCov, fixedCov, cirCov)
return(returnObj)
}
a = AMK(data[, c(1, 3, 6)], data[, 5], testX = data[, c(1, 3, 6)], bw = 'dpi', nMultiCov = 2, fixedCov = c(1, 3), cirCov = 2)
View(data)
trainY = data[, 5]
trainX = data[, c(1, 3, 6)]
cirCov = 2
bandwidth = rep(0,ncol(trainX))
for (i in 1:ncol(trainX)){
bandwidth[i] = KernSmooth::dpill(trainX[,i],trainY)
}
for (i in cirCov){
bandwidth[i] = bandwidth[i]*pi/180
bandwidth[i] = 1/((bandwidth[i])^2)
}
a = AMK(data[, c(3)], data[, 5], testX = data[, c(3)], bw = 'dpi', cirCov = 1)
a = AMK(data[, c(3), drop = F], data[, 5], testX = data[, c(3), drop = F], bw = 'dpi', cirCov = 1)
a$pred
is.null(a$pred)
table(a$pred)
library(DSWE)
help(DSWE::KnnPCFit)
help(KnnPCFit)
library(DSWE)
remove.packages("DSWE", lib="~/R/win-library/3.6")
library(DSWE)
library(DSWE)
library(DSWE)
library(DSWE)
library(DSWE)
library(DSWE)
library(DSWE)
library(DSWE)
remove.packages("DSWE", lib="~/R/win-library/3.6")
library(DSWE)
remove.packages("DSWE", lib="~/R/win-library/3.6")
remove.packages("dplyr", lib="~/R/win-library/3.6")
install.packages("dplyr")
library(DSWE)
library(DSWE)
library(DSWE)
remove.packages("DSWE", lib="~/R/win-library/3.6")
library(DSWE)
library(DSWE)
library(DSWE)
library(DSWE)
library(DSWE)
library(DSWE)
library(DSWE)
## Testing ComparePcurve function
path = NULL
turbine = 41
dataIdx = c(3,4)
library(DSWE)
datalist = list()
for (i in 1:2){
datalist[[i]] = read.csv(paste0(path,'Turbine',turbine,'_',dataIdx[i],'.csv'))
}
setwd("~/Dropbox/Projects/GoldwindPaper")
for (i in 1:2){
datalist[[i]] = read.csv(paste0(path,'Turbine',turbine,'_',dataIdx[i],'.csv'))
}
xCol = c(2,4,8)
yCol = 6
matchedDatasets = CovMatch(datalist,xCol)
library(DSWE)
datalist = list()
for (i in 1:2){
datalist[[i]] = read.csv(paste0(path,'Turbine',turbine,'_',dataIdx[i],'.csv'))
}
xCol = c(2,4,8)
yCol = 6
matchedDatasets = CovMatch(datalist,xCol)
library(DSWE)
datalist = list()
for (i in 1:2){
datalist[[i]] = read.csv(paste0(path,'Turbine',turbine,'_',dataIdx[i],'.csv'))
}
xCol = c(2,4,8)
## Testing ComparePcurve function
path = NULL
turbine = 41
dataIdx = c(3,4)
library(DSWE)
datalist = list()
for (i in 1:2){
datalist[[i]] = read.csv(paste0(path,'Turbine',turbine,'_',dataIdx[i],'.csv'))
}
xCol = c(2,4,8)
yCol = 6
matchedDatasets = CovMatch(datalist,xCol)
?CovMatch
?ComparePCurve
?funGP
#Computing a 50 by 50 grid
testset = as.matrix(expand.grid(seq(matchedDatasets$MinMaxMatched[1,1],matchedDatasets$MinMaxMatched[2,1],length.out=50),seq(matchedDatasets$MinMaxMatched[1,2],matchedDatasets$MinMaxMatched[2,2],length.out=50)))
matchedData = matchedDatasets$matchedData
rm(matchedDatasets) # removing unnecessary objects
gc()
testCol = c(2,4)
funGPoutput = funGP(matchedData,testCol,yCol,0.95,testset)
library(DSWE)
## Testing ComparePcurve function
path = NULL
turbine = 41
dataIdx = c(3,4)
library(DSWE)
datalist = list()
for (i in 1:2){
datalist[[i]] = read.csv(paste0(path,'Turbine',turbine,'_',dataIdx[i],'.csv'))
}
xCol = c(2,4,8)
yCol = 6
matchedDatasets = CovMatch(datalist,xCol)
#Computing a 50 by 50 grid
testset = as.matrix(expand.grid(seq(matchedDatasets$MinMaxMatched[1,1],matchedDatasets$MinMaxMatched[2,1],length.out=50),seq(matchedDatasets$MinMaxMatched[1,2],matchedDatasets$MinMaxMatched[2,2],length.out=50)))
matchedData = matchedDatasets$matchedData
rm(matchedDatasets) # removing unnecessary objects
gc()
testCol = c(2,4)
funGPoutput = funGP(matchedData,testCol,yCol,0.95,testset)
